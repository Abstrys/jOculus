/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package abstrys.joculus;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import javax.swing.JOptionPane;

/**
 *
 * @author eronh
 */
public class MarkdownProcessor implements Runnable
{
   public interface XhtmlHandler
   {
      /**
       * Receives the processed XHTML on MarkdownProcessor success
       * @param xhtml the well-formed XHTML that was generated by the markdown processor.
       */
      public void xhtmlSuccess(String xhtml);

      /**
       * Receives the failure reason on MarkdownProcessor failure
       * @param error_text the reason MarkdownProcessor failed.
       */
      public void xhtmlFailure(String error_text);
   }

   File markdown_file;
   XhtmlHandler mp_handler;
   Settings settings;

   /**
    * Creates a MarkdownProcessor to work on the provided text
    * @param s the text to process
    */
   public MarkdownProcessor(File f, Settings settings, XhtmlHandler handler)
   {
      markdown_file = f;
      mp_handler = handler;
      this.settings = settings;
   }

   @Override
   public void run()
   {
      String output = processFileExternal();
      if(output != null)
      {
         mp_handler.xhtmlSuccess(output);
      }
   }

      /**
    * Process the file using the built-in processor.
    */
   private void processFile()
   {
   }

   /**
    * Call the external file processor.
    */
   private String processFileExternal()
   {
      String output_str = "";
      Process cmd_proc;

      final String cmdline = settings.md_processor_path + " " + settings.md_processor_opt + " " + markdown_file.getAbsolutePath();

      try
      {
         cmd_proc = Runtime.getRuntime().exec(cmdline);
      }
      catch (IOException exc)
      {
         mp_handler.xhtmlFailure(exc.getMessage());
         return "<p>Error: " + Strings.ERROR_INVALID_PROCESSOR_PATH + "</p>";
      }

      if (cmd_proc != null)
      {
         BufferedReader error_reader = new BufferedReader(new InputStreamReader(cmd_proc.getErrorStream()));
         BufferedReader output_reader = new BufferedReader(new InputStreamReader(cmd_proc.getInputStream()));
         output_str = readStringFromReader(output_reader);
         String error_str = readStringFromReader(error_reader);
         if (error_str.length() > 0)
         {
            JOptionPane.showMessageDialog(null, error_str, "Error", JOptionPane.ERROR_MESSAGE);
         }
      }

      return output_str;
   }

   private static String readStringFromReader(BufferedReader br)
   {

      StringBuilder sb = new StringBuilder();
      try
      {
         boolean done = false;
         do
         {
            String s = br.readLine();
            if (s == null)
            {
               done = true;
            }
            else
            {
               sb.append(s);
               sb.append("\n");
            }
         }
         while (!done);

         br.close();
      }
      catch (java.io.IOException exc)
      {
         JOptionPane.showMessageDialog(null, "Error: " + exc.getMessage(), Strings.APPNAME, JOptionPane.ERROR_MESSAGE);
      }

      return sb.toString();
   }

}
